freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
chisqs=apply(snps,1,compute_chisquare)
chisqs2=apply(snps,1,compute_chisquare_2)
#check to see that the chisquare statistcs are the same:
#first do this by computing Pearson's correlation coefficient:
cor.test(chisqs,chisqs2)
#we can also do a quick scatterplot:
plot(chisqs,chisqs2)
# Compute p-values for each chi-square value using the pchisq function
pvals=pchisq(chisqs,1,lower.tail=FALSE)
p=seq(0,0.5,by=0.05)   # Set-up a vector with a sequence of allele frequencies
points(p,2*p*(1-p),type="l",col=2) # Plot the HW expectation as a line in red
## APPYLING A CHI-SQUARE TEST TO EACH SNP TO FORMALLY LOOK FOR DEPARTURES FROM HARDY-WEINBERG EXPECTATIONS ###
compute_chisquare=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
#let's make a second funtion that makes use of R's built in chisq.test function
compute_chisquare_2=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
#here we use the built-in function for the chi-sq distribution:
exp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n
chisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic
return(chisq)
}
# Apply the compute_chi_square function to each snp
chisqs=apply(snps,1,compute_chisquare)
chisqs2=apply(snps,1,compute_chisquare_2)
#check to see that the chisquare statistcs are the same:
#first do this by computing Pearson's correlation coefficient:
cor.test(chisqs,chisqs2)
plot(chisqs,chisqs2)
pvals=pchisq(chisqs,1,lower.tail=FALSE)
histogram(pvals)
hist(pvals)
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
# Clair Martin
# 2016-09-15
# EEB QBC
# Lohmueller HW Day 1
la_height_in_mean = 69;
la_height_in_sd = 10;
# function get_heights
# is this really a function without any input?
get_heights <- function(num){
la_height_in_mean = 69;
la_height_in_sd = 10;
heights <- rnorm(num,69,10);
mean_heights <- mean(heights);
return(mean_heights);
}# function(num)
# to run function: heights<-get_heights(1000)
#### mean_heights_100 ####
mean_heights_100 <- rep(NaN,100)
for (ii in 1:1000){
mean_heights_ii <- get_heights(100);
mean_heights_100[ii] <- mean_heights_ii;
rm(mean_heights_ii)
}
#### mean_heights_1000 ####
mean_heights_1000 <- rep(NaN,1000)
for (ii in 1:1000){
mean_heights_ii <- get_heights(1000);
mean_heights_1000[ii] <- mean_heights_ii;
rm(mean_heights_ii)
}
#### Plot ####
# Convert to binned counts
# get min max with floor ceil
min_val = floor(min(c(mean_heights_100, mean_heights_1000)));
max_val = ceiling(max(c(mean_heights_100, mean_heights_1000)));
# bins by 1
bins <- seq(min_val,max_val,0.5);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
# Clair Martin
# 2016-09-15
# EEB QBC
# Lohmueller HW Day 1
la_height_in_mean = 69;
la_height_in_sd = 10;
# function get_heights
# is this really a function without any input?
get_heights <- function(num){
la_height_in_mean = 69;
la_height_in_sd = 10;
heights <- rnorm(num,69,10);
mean_heights <- mean(heights);
return(mean_heights);
}# function(num)
# to run function: heights<-get_heights(1000)
#### mean_heights_100 ####
mean_heights_100 <- rep(NaN,100)
for (ii in 1:1000){
mean_heights_ii <- get_heights(100);
mean_heights_100[ii] <- mean_heights_ii;
rm(mean_heights_ii)
}
#### mean_heights_1000 ####
mean_heights_1000 <- rep(NaN,1000)
for (ii in 1:1000){
mean_heights_ii <- get_heights(1000);
mean_heights_1000[ii] <- mean_heights_ii;
rm(mean_heights_ii)
}
#### Plot ####
# Convert to binned counts
# get min max with floor ceil
min_val = floor(min(c(mean_heights_100, mean_heights_1000)));
max_val = ceiling(max(c(mean_heights_100, mean_heights_1000)));
# bins by 1
bins <- seq(min_val,max_val,0.5);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
seq(min_val, max_val,by=1)
bins <- seq(min_val,max_val,1);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
dev.off()
# Clair Martin
# 2016-09-15
# EEB QBC
# Lohmueller HW Day 1
la_height_in_mean = 69;
la_height_in_sd = 10;
# function get_heights
# is this really a function without any input?
get_heights <- function(num){
la_height_in_mean = 69;
la_height_in_sd = 10;
heights <- rnorm(num,69,10);
mean_heights <- mean(heights);
return(mean_heights);
}# function(num)
# to run function: heights<-get_heights(1000)
#### mean_heights_100 ####
mean_heights_100 <- rep(NaN,100)
for (ii in 1:1000){
mean_heights_ii <- get_heights(100);
mean_heights_100[ii] <- mean_heights_ii;
rm(mean_heights_ii)
}
#### mean_heights_1000 ####
mean_heights_1000 <- rep(NaN,1000)
for (ii in 1:1000){
mean_heights_ii <- get_heights(1000);
mean_heights_1000[ii] <- mean_heights_ii;
rm(mean_heights_ii)
}
#### Plot ####
# Convert to binned counts
# get min max with floor ceil
min_val = floor(min(c(mean_heights_100, mean_heights_1000)));
max_val = ceiling(max(c(mean_heights_100, mean_heights_1000)));
# bins by 1
bins <- seq(min_val,max_val,1);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
#### Plot ####
# Convert to binned counts
# get min max with floor ceil
min_val = floor(min(c(mean_heights_100, mean_heights_1000)));
max_val = ceiling(max(c(mean_heights_100, mean_heights_1000)));
# bins by 1
bins <- seq(min_val,max_val,0.5);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
# get min max with floor ceil
min_val = floor(min(c(mean_heights_100, mean_heights_1000)));
max_val = ceiling(max(c(mean_heights_100, mean_heights_1000)));
# bins by 1
bins <- seq(min_val,max_val);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
bins <- seq(min_val,max_val,0.5);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=2), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
bins <- seq(min_val,max_val,0.5);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val, max_val,by=2), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
seq(min_val, max_val,by=2)
bins <- seq(min_val,max_val,0.5);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
bins <- seq(min_val,max_val,1);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
bins <- seq(min_val,max_val,1);
# get counts
ct100 <- hist(mean_heights_100,breaks=bins)$counts;
ct1000 <- hist(mean_heights_1000,breaks=bins)$counts;
# Plotting
# open pdf file
pdf(file="la_heights_histo_integerbinslabeled.pdf", width=6,height=6);
# set plotting area & margins
par(mfrow=c(1,1), mar=c(3,3,3,3));
# Print/draw
# 100 = red, 1000 = blue
barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, names.arg=seq(min_val+1, max_val,by=1), xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
#barplot(rbind(ct100,ct1000), col=c(2,4), beside=TRUE, xlab="Average Height (inches)", ylab="Count", axes=TRUE, axisnames=TRUE)
# Add legend
legend(1,350,c("n=100","n=1000"),col=c(2,4),lwd=4);
# close pdf
dev.off()
rm(ls())
rm()
ls
ls()
rm(list)
list = ls()
listy = ls()
rm(listy)
clear
rm()
close all
rm(list = ls())
# initialize workspace
rm(list=ls()) # clean workspace
graphics.off() # close all open plot windows
# Load libraries
library('igraph') # library for network analysis
# load data
iris=iris
View(iris)
View(iris)
# look at the data
head(iris) # shows the first 6 lines of the data frame
unique(iris$Species) # shows all the species
# look at the data
head(iris) # shows the first 6 lines of the data frame
unique(iris$Species) # shows all the species
# get the subset data from two species
setosa=iris[iris$Species=='setosa',] ## assign only the rows that belong to setosa and all the columns in the data frame to a variable named "setosa"
virginica=iris[iris$Species=='virginica',] ## assign only the rows that belong to virginica and all the columns in the data frame to a variable named "virginica"
windows() # opens the figure in a new window. use the command quartz() for macs
quartz()
par(mar=c(4, 4, 3, 2)) # set the margins
boxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5) # make sure the fonts are large enough to read
par(mar=c(4, 4, 3, 2)) # set the margins
boxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5) # make sure the fonts are large enough to read
par(mar=c(4, 4, 3, 2)) # set the margins
boxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot
names=c('Setosa','Virginica'),xlab = "Species", ylab="Sepal Length", # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5) # make sure the fonts are large enough to read
?t,test
?t.test
quartz() # open a new figure window
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length", # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
head(iris)
quartz() # open a new figure window
plot(iris$Species, iris$Petal.Length, # data to plot
ylab="Sepal Length", # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
quartz() # open a new figure window
plot(iris$Species, iris$Petal.Length, # data to plot
ylab="Petal Length", # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
quartz() # open a new figure window
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length", # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
graphics.off() # close all open plot windows
quartz() # open a new figure window
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length", # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
anova1=aov(iris$Sepal.Length~iris$Species) # set up the statistical test
summary(anova1) # look at the results of the statistical test
TukeyHSD(anova1) # examine each pair using a Tukey test
quartz() # open a new figure window
plot(iris$Species, iris$Sepal.Length,ylab="Sepal Length", # data to plot and label axes
ylim=c(4,10), # set the y limits to make space for stats test results
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
# after you call plot you can add a various graphical features:
# add letters above the boxes
text(c(1,2,3),c(9,9,9), # set the location of the letters
c('A','B','C'), # set which letters to display  on the plot
cex=2) # make sure they are large enough to read
## add a legend to the plot:
legend(2,10, # set the location x, y
unique(iris$Species), # text to display
text.col=c("hotpink", "plum", "cornflowerblue"), #text color
bty ='n') # remove outline of legend box
# and just for fun...
# add circles  around the letters
points(c(1,2,3),c(9,9,9), # location of circles
cex=10) # size of circles (default of points is empty circles - look up  in your R reference card what other shapes you can set using pch= )
quartz() # set a new figure
plot(iris$Petal.Length,iris$Sepal.Length, # data to plot
xlab='Petal length',ylab='Sepal length', # label your axes
pch=16,las=1,cex.axis=1.5,cex.lab=1.5) # make the figure pretty
# run a Pearson's correlation test to see if traits are statistically correlated:
cor.test(iris$Petal.Length,iris$Sepal.Length)
fit_with_sp=lm(Sepal.Width ~ Petal.Length + Species - 1, data=iris)
summary(fit_with_sp) # look at the results
# add an interaction term:
fit_with_sp_with_int=lm(Sepal.Width ~ Petal.Length * Species - 1, data=iris)
summary(fit_with_sp_with_int)
quartz()
plot(iris, col=cols2, pch=16)
cols2=c("hotpink", "plum", "cornflowerblue")[unclass(iris$Species)]
quartz()
plot(iris, col=cols2, pch=16)
fit_with_sp=lm(Sepal.Width ~ Petal.Length + Species - 1, data=iris)
summary(fit_with_sp) # look at the results
# add an interaction term:
fit_with_sp_with_int=lm(Sepal.Width ~ Petal.Length * Species - 1, data=iris)
sw_pl <- summary(fit_with_sp_with_int)
fit_with_sp=lm(Petal.Length ~ Sepal.Width + Species - 1, data=iris)
summary(fit_with_sp) # look at the results
# add an interaction term:
fit_with_sp_with_int=lm(Sepal.Width ~ Petal.Length * Species - 1, data=iris)
ws_pl <- summary(fit_with_sp_with_int)
ws_pl
sw_pl
fit_with_sp_with_int=lm(Petal.Length ~ Sepal.Width * Species - 1, data=iris)
sw_pl <- summary(fit_with_sp_with_int)
sw_pl
quartz()
plot(iris$Petal.Length,iris$Sepal.Width, xlab='Petal length',ylab='Sepal width',pch=16, # same as above...
col=rainbow(max(iris$Petal.Length)*10)[iris$Petal.Length*10]) # set a color Palette 'rainbow' and assign colors by petal length
