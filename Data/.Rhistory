day0 = ChickWeight[ChickWeight$Time == 0,]
# run an ANOVA:
anova1=aov(day0$weight~day0$Diet) # set up the statistical test
summary(anova1) # look at the results of the statistical test
tukey_day0 <-TukeyHSD(anova1) # examine each pair using a Tukey test POST HOC to check which are different from eachother
# Plot
#plotfilename = "/Users/jungminson/qbc_martin/Exercises/martin_pinter-wollman_day2_output_chickweightday0_2.pdf";
plotfilename = "/Users/jungminson/qbc_martin/Exercises/martin_pinter-wollman_day2_output_chickweightday0.pdf";
# Create pdf object/open pdf output device
pdf(file=plotfilename,width=6,height=7);
par(mfrow=c(1,1), mar=c(4, 4, 4, 4)); # set subplot pos and size
plot(day0$Diet, day0$weight,
xlab = "Diet", ylab = "Weight, g",
ylim = c(38,45),
main = "Chick Weights at Day 0");
# Add significance notation
#text(c(1,2,3,4),c(44,44,44,44), # set the location of the letters
#    c('A','A','A','A'), # set which letters to display  on the plot
#   cex=2) # make sure they are large enough to read
# Try to add a table in next subplot
print.data.frame(tukey_day0,show.rownames = F)
write.table(tukey_day0,plotfilename)
# Close output stream
dev.off() # shuts off current output devbice
#### I.2 Weight diff at day 21 ####
# Get all day 0 samples
day21 = ChickWeight[ChickWeight$Time == 21,]
# run an ANOVA:
anova2=aov(day21$weight~day21$Diet) # set up the statistical test
summary(anova2) # look at the results of the statistical test
TukeyHSD(anova2) # examine each pair using a Tukey test POST HOC to check which are different from eachother
# Plot
plotfilename = "/Users/jungminson/qbc_martin/Exercises/martin_pinter-wollman_day2_output_chickweightday21.pdf";
# Create pdf object/open pdf output device
pdf(file=plotfilename,width=6,height=7);
par(mfrow=c(1,1), mar=c(4, 4, 4, 4)); # set subplot pos and size
plot(day21$Diet, day21$weight,
xlab = "Diet", ylab = "Weight, g",
#ylim = c(38,45),
main = "Chick Weights at Day 21");
# Add significance notation
# Close output stream
dev.off() # shuts off current output devbice
#### Prepwork ####
# Clear workspace
rm(list=ls())
# Set working directory:
setwd("/Users/jungminson/qbc_martin/Data")
# Load data set
snpsDataFrame<-read.table('hapmap_CEU_r23a_chr2_ld-1.txt',header=TRUE)
#### 1.A. H-W Chi-square revisited ####
# Convert data frame to matrix
snps<-as.matrix(snpsDataFrame)
# Chi-square fxn
compute_chisquare=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
# Perform chisquare on snp matrix
chisqs<-apply(snps,1,compute_chisquare)
# Get and store pvals
pvals<-pchisq(chisqs,1,lower.tail=FALSE)
#### 1.B. Pval proportions ####
# Get total number of pvals for denominator in proportion
n_pvals <- length(pvals); # = 4014
# <0.05
signifthresh<-0.05
n_belowthresh_0.05 <- sum(pvals<signifthresh) # = 181
proportion_0.05 <- n_belowthresh_0.05/n_pvals; # = 0.04509218
# <0.01
signifthresh<-0.01
n_belowthresh_0.01 <- sum(pvals<signifthresh) # = 41
proportion_0.01 <- n_belowthresh_0.01/n_pvals; # 0.01021425
# <0.001
signifthresh<-0.001
n_belowthresh_0.001 <- sum(pvals<signifthresh) # = 5
proportion_0.001 <- n_belowthresh_0.001/n_pvals; # = 0.00124564
#### 1.C. Departures from H-W ####
# rename for KEL style, ignore length and use sum of boolean vector as before
num_pval_0.05 = n_belowthresh_0.05;
num_pval_0.01 = n_belowthresh_0.01;
num_pval_0.001 = n_belowthresh_0.001;
#### 1.D. Expected pvals ####
# Initiate variables
#exp_pval_0.05 = rep(NA,num_pval_0.05);
#exp_pval_0.01 = rep(NA,num_pval_0.01);
#exp_pval_0.001 = rep(NA,num_pval_0.001);
exp_pval = rep(NA,n_pvals);
# Make a numerator vector. ?cleaner way to do this
#numerator_0.05 = seq(1,num_pval_0.05,1);
#numerator_0.01 = seq(1,num_pval_0.01,1);
#numerator_0.001 = seq(1,num_pval_0.001,1);
numerator = seq(1,n_pvals,1);
# Get expected pvals
#exp_pval_0.05 = numerator_0.05/num_pval_0.05;
#exp_pval_0.01 = numerator_0.01/num_pval_0.01;
#exp_pval_0.001 = numerator_0.001/num_pval_0.001;
exp_pval = numerator/n_pvals;
#### 1.E. Sort pvals ####
# sort(x, decreasing = FALSE, na.last = NA, ...)
sort_pvals = sort(pvals)
#### 1.F Get -log10 of exp and obsv pvals ####
log_sort_pvals = -log10(sort_pvals);
log_exp_pvals = -log10(exp_pval);
#### 1.F. Scatter plot ####
# Set file name
plotfilename = "/Users/jungminson/qbc_martin/Exercises/martin_lohmueller_day2_output_qqplot.pdf";
# Create pdf object/open pdf output device
#pdf(file=plotfilename,width=4,height=7);
pdf(file=plotfilename,width=6,height=6);
#Set pdf param
par(mfrow=c(1,1), mar=c(4, 4, 4, 4)); # set subplot pos and size
#mar order bottom, left, top, right
# Set axis label strings
xlab_str = "-log10(expected P-value)";
ylab_str = "-log10(observed P-value)";
# plot scatter
#quartz()
plot(log_exp_pvals, log_sort_pvals, type = "p", # scatter x y data
xlab = xlab_str, ylab = ylab_str, # axis labels
main = "QQ Plot from hapmap_CEU_r23a_chr2_ld.txt", # main title
ylim(c(0,5)),xlim(c(0,5)),
pch=19, # filled markers
cex.lab=1.2, # label size
cex.axis=1.2 # axis size
);
#### 1.H Add diagonal line (m=1) ####
linecolor = 2;
abline(a = 0, b = 1, col = linecolor)
# Close output stream
dev.off() # shuts off current output devbice
# Clair Martin
# 2016-09-17
# EEB QBC
# Lohmueller HW Day 2
#### Prepwork ####
# Clear workspace
rm(list=ls())
# Set working directory:
setwd("/Users/jungminson/qbc_martin/Data")
# Load data set
snpsDataFrame<-read.table('hapmap_CEU_r23a_chr2_ld-1.txt',header=TRUE)
#### 1.A. H-W Chi-square revisited ####
# Convert data frame to matrix
snps<-as.matrix(snpsDataFrame)
# Chi-square fxn
compute_chisquare=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
# Perform chisquare on snp matrix
chisqs<-apply(snps,1,compute_chisquare)
# Get and store pvals
pvals<-pchisq(chisqs,1,lower.tail=FALSE)
#### 1.B. Pval proportions ####
# Get total number of pvals for denominator in proportion
n_pvals <- length(pvals); # = 4014
# <0.05
signifthresh<-0.05
n_belowthresh_0.05 <- sum(pvals<signifthresh) # = 181
proportion_0.05 <- n_belowthresh_0.05/n_pvals; # = 0.04509218
# <0.01
signifthresh<-0.01
n_belowthresh_0.01 <- sum(pvals<signifthresh) # = 41
proportion_0.01 <- n_belowthresh_0.01/n_pvals; # 0.01021425
# <0.001
signifthresh<-0.001
n_belowthresh_0.001 <- sum(pvals<signifthresh) # = 5
proportion_0.001 <- n_belowthresh_0.001/n_pvals; # = 0.00124564
#### 1.C. Departures from H-W ####
# rename for KEL style, ignore length and use sum of boolean vector as before
num_pval_0.05 = n_belowthresh_0.05;
num_pval_0.01 = n_belowthresh_0.01;
num_pval_0.001 = n_belowthresh_0.001;
#### 1.D. Expected pvals ####
# Initiate variables
#exp_pval_0.05 = rep(NA,num_pval_0.05);
#exp_pval_0.01 = rep(NA,num_pval_0.01);
#exp_pval_0.001 = rep(NA,num_pval_0.001);
exp_pval = rep(NA,n_pvals);
# Make a numerator vector. ?cleaner way to do this
#numerator_0.05 = seq(1,num_pval_0.05,1);
#numerator_0.01 = seq(1,num_pval_0.01,1);
#numerator_0.001 = seq(1,num_pval_0.001,1);
numerator = seq(1,n_pvals,1);
# Get expected pvals
#exp_pval_0.05 = numerator_0.05/num_pval_0.05;
#exp_pval_0.01 = numerator_0.01/num_pval_0.01;
#exp_pval_0.001 = numerator_0.001/num_pval_0.001;
exp_pval = numerator/n_pvals;
#### 1.E. Sort pvals ####
# sort(x, decreasing = FALSE, na.last = NA, ...)
sort_pvals = sort(pvals)
#### 1.F Get -log10 of exp and obsv pvals ####
log_sort_pvals = -log10(sort_pvals);
log_exp_pvals = -log10(exp_pval);
#### 1.F. Scatter plot ####
# Set file name
plotfilename = "/Users/jungminson/qbc_martin/Exercises/martin_lohmueller_day2_output_qqplot.pdf";
# Create pdf object/open pdf output device
#pdf(file=plotfilename,width=4,height=7);
pdf(file=plotfilename,width=6,height=6);
#Set pdf param
par(mfrow=c(1,1), mar=c(4, 4, 4, 4)); # set subplot pos and size
#mar order bottom, left, top, right
# Set axis label strings
xlab_str = "-log10(expected P-value)";
ylab_str = "-log10(observed P-value)";
# plot scatter
#quartz()
plot(log_exp_pvals, log_sort_pvals, type = "p", # scatter x y data
xlab = xlab_str, ylab = ylab_str, # axis labels
main = "QQ Plot from hapmap_CEU_r23a_chr2_ld.txt", # main title
ylim = (c(0,5)), xlim = (c(0,5)),
pch=19, # filled markers
cex.lab=1.2, # label size
cex.axis=1.2 # axis size
);
#### 1.H Add diagonal line (m=1) ####
linecolor = 2;
abline(a = 0, b = 1, col = linecolor)
# Close output stream
dev.off() # shuts off current output devbice
TukeyHSD(anova2)
ay0 = ChickWeight[ChickWeight$Time == 0,]
# run an ANOVA:
anova1=aov(day0$weight~day0$Diet) # set up the statistical test
summary(anova1) # look at the results of the statistical test
tukey_day0 <-TukeyHSD(anova1) # examine each pair using a Tukey test POST HOC to check which are different from eachother
day0 = ChickWeight[ChickWeight$Time == 0,]
# run an ANOVA:
anova1=aov(day0$weight~day0$Diet) # set up the statistical test
summary(anova1) # look at the results of the statistical test
tukey_day0 <-TukeyHSD(anova1)
aov
?aov
head(ChickWeight)
anova3 <- aov(ChickWeight$weight ~ ChickWeight$Diet * ChickWeight$Time + error(ChickWeight$Chick, data = ChickWeight) )
anova3 <- aov(ChickWeight$weight ~ ChickWeight$Diet * ChickWeight$Time + error(ChickWeight$Chick), data = ChickWeight)
anova3 <- aov(ChickWeight$weight ~ ChickWeight$Diet * ChickWeight$Time)
summary(anova3)
TukeyHSD(anova3)
g1 = ChickWeight[ChickWeight$Diet == 1]
g1 = ChickWeight[ChickWeight$Diet == 1,];
g2 = ChickWeight[ChickWeight$Diet == 2,];
g3 = ChickWeight[ChickWeight$Diet == 3,];
g4 = ChickWeight[ChickWeight$Diet == 4,];
g1
timepoints = unique(g1$Time)
timepoints
timepoints = unique(ChickWeight$Time)
timepoints
timepoints
means_bygroup_attime <- rep(NA,4,n_timepoints)
n_timepoints <- length(timepoints);
n_groups <- 4;
means_bygroup_attime <- rep(NA,4,n_timepoints)
means_bygroup_attime
?rep
timepoints = unique(g1$Time)
#initialize array
n_timepoints <- length(timepoints);
g1_mean = rep(NA,n_timepoints)
g1_sd = rep(NA,n_timepoints)
n=1
for (x in timepoints){
y = g1[g1$Time == x];
g1_mean[n] <- mean(y);
g1_sd[n] <- sd(y);
n=n+1
}
timepoints
x
g1$Time == x
g1[g1$Time == x]
n=1
for (x in timepoints){
y = g1[g1$Time == x,];
g1_mean[n] <- mean(y);
g1_sd[n] <- sd(y);
n=n+1
}
x
g1[g1$Time == x,]
n=1
for (x in timepoints){
y = g1[g1$Time == x,];
g1_mean[n] <- mean(y$Weight);
g1_sd[n] <- sd(y4Weight);
n=n+1
}
n=1
for (x in timepoints){
y = g1[g1$Time == x,];
g1_mean[n] <- mean(y$Weight);
g1_sd[n] <- sd(y$Weight);
n=n+1
}
y = g1[g1$Time == x,]
x
mean(y$Weight)
y
n=1
for (x in timepoints){
y = g1[g1$Time == x,];
g1_mean[n] <- mean(y$weight);
g1_sd[n] <- sd(y$weight);
n=n+1
}
g1_sd
timepoints = unique(g1$Time)
#initialize array
n_timepoints <- length(timepoints);
g1_mean = rep(NA,n_timepoints)
g1_sd = rep(NA,n_timepoints)
n=1
for (x in timepoints){
y = g1[g1$Time == x,];
g1_mean[n] <- mean(y$weight);
g1_sd[n] <- sd(y$weight);
rm(y)
n=n+1
}
g1_sd
g1_mean
g1 = ChickWeight[ChickWeight$Diet == 1,];
g2 = ChickWeight[ChickWeight$Diet == 2,];
g3 = ChickWeight[ChickWeight$Diet == 3,];
g4 = ChickWeight[ChickWeight$Diet == 4,];
# get mean and sd by group and timepoint
# get unique time points by group
timepoints = unique(g1$Time)
#initialize array
n_timepoints <- length(timepoints);
g1_mean = rep(NA,n_timepoints)
g1_sd = rep(NA,n_timepoints)
n=1
for (x in timepoints){
y = g1[g1$Time == x,];
g1_mean[n] <- mean(y$weight);
g1_sd[n] <- sd(y$weight);
rm(y)
n=n+1
}
# get unique time points by group
timepoints = unique(g2$Time)
#initialize array
n_timepoints <- length(timepoints);
g2_mean = rep(NA,n_timepoints)
g2_sd = rep(NA,n_timepoints)
n=1
for (x in timepoints){
y = g2[g2$Time == x,];
g2_mean[n] <- mean(y$weight);
g2_sd[n] <- sd(y$weight);
rm(y)
n=n+1
}
# get unique time points by group
timepoints = unique(g3$Time)
#initialize array
n_timepoints <- length(timepoints);
g3_mean = rep(NA,n_timepoints)
g3_sd = rep(NA,n_timepoints)
n=1
for (x in timepoints){
y = g3[g3$Time == x,];
g3_mean[n] <- mean(y$weight);
g3_sd[n] <- sd(y$weight);
rm(y)
n=n+1
}
# get unique time points by group
timepoints = unique(g4$Time)
#initialize array
n_timepoints <- length(timepoints);
g4_mean = rep(NA,n_timepoints)
g4_sd = rep(NA,n_timepoints)
n=1
for (x in timepoints){
y = g4[g4$Time == x,];
g4_mean[n] <- mean(y$weight);
g4_sd[n] <- sd(y$weight);
rm(y)
n=n+1
}
quartz()
plot(g1$Time, g1$weight, type = "p", col = "black")
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black")
plot(g2$Time, g2$weight, type = "p", pch = 19, col = "red")
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black")
matplot(g2$Time, g2$weight, type = "p", pch = 19, col = "red",add = T)
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black")
matplot(g2$Time, g2$weight, type = "p", pch = 19, col = "red",add = T)
matplot(g3$Time, g3$weight, type = "p", pch = 19, col = "green",add = T)
matplot(g4$Time, g4$weight, type = "p", pch = 19, col = "blue",add = T)
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black")
matplot(g2$Time, g2$weight, type = "p", pch = 1, col = "red",add = T)
matplot(g3$Time, g3$weight, type = "p", pch = 15, col = "green",add = T)
matplot(g4$Time, g4$weight, type = "p", pch = 0, col = "blue",add = T)
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black", cex = 1)
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black", cex = 0.5)
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black", cex = 0.5)
matplot(g2$Time, g2$weight, type = "p", pch = 1, col = "red",add = T)
matplot(g3$Time, g3$weight, type = "p", pch = 15, col = "green",add = T, cex = 0.5)
matplot(g4$Time, g4$weight, type = "p", pch = 0, col = "blue",add = T)
quartz()
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black", cex = 0.5)
matplot(g2$Time, g2$weight, type = "p", pch = 17, col = "red",add = T, cex = 0.5)
matplot(g3$Time, g3$weight, type = "p", pch = 15, col = "green",add = T, cex = 0.5)
matplot(g4$Time, g4$weight, type = "p", pch = 18, col = "blue",add = T, cex = 0.5)
matplot(timepoints, g1_mean, type= "l", col = "black")
quartz()
# scatter
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black", cex = 0.5)
matplot(g2$Time, g2$weight, type = "p", pch = 17, col = "red",add = T, cex = 0.5)
matplot(g3$Time, g3$weight, type = "p", pch = 15, col = "green",add = T, cex = 0.5)
matplot(g4$Time, g4$weight, type = "p", pch = 18, col = "blue",add = T, cex = 0.5)
# mean
matplot(timepoints, g1_mean, type= "l", col = "black")
quartz()
# scatter
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black", cex = 0.5)
matplot(g2$Time, g2$weight, type = "p", pch = 17, col = "red",add = T, cex = 0.5)
matplot(g3$Time, g3$weight, type = "p", pch = 15, col = "green",add = T, cex = 0.5)
matplot(g4$Time, g4$weight, type = "p", pch = 18, col = "blue",add = T, cex = 0.5)
# mean
matplot(timepoints, g1_mean, type= "l", col = "black", add= T)
quartz()
# scatter
plot(g1$Time, g1$weight, type = "p", pch = 19, col = "black", cex = 0.5)
matplot(g2$Time, g2$weight, type = "p", pch = 17, col = "red",add = T, cex = 0.5)
matplot(g3$Time, g3$weight, type = "p", pch = 15, col = "green",add = T, cex = 0.5)
matplot(g4$Time, g4$weight, type = "p", pch = 18, col = "blue",add = T, cex = 0.5)
# mean
matplot(timepoints, g1_mean, type= "l", col = "black", add= T)
matplot(timepoints, g2_mean, type= "l", col = "red", add= T)
matplot(timepoints, g3_mean, type= "l", col = "green", add= T)
matplot(timepoints, g4_mean, type= "l", col = "blue", add= T)
matplot(timepoints, g1_mean-g1_sd, type= "l", lty = 2, col = "black", add= T)
matplot(timepoints, g2_mean-g2_sd, type= "l", lty = 2, col = "red", add= T)
matplot(timepoints, g3_mean-g3_sd, type= "l", lty = 2, col = "green", add= T)
matplot(timepoints, g4_mean-g4_sd, type= "l", lty = 2, col = "blue", add= T)
quartz()
plot(timepoints, g1_mean, type= "l", col = "black", add= T)
#matplot(timepoints, g1_mean, type= "l", col = "black", add= T)
matplot(timepoints, g2_mean, type= "l", col = "red", add= T)
matplot(timepoints, g3_mean, type= "l", col = "green", add= T)
matplot(timepoints, g4_mean, type= "l", col = "blue", add= T)
# -1 sd
matplot(timepoints, g1_mean-g1_sd, type= "l", lty = 2, col = "black", add= T)
matplot(timepoints, g2_mean-g2_sd, type= "l", lty = 2, col = "red", add= T)
matplot(timepoints, g3_mean-g3_sd, type= "l", lty = 2, col = "green", add= T)
matplot(timepoints, g4_mean-g4_sd, type= "l", lty = 2, col = "blue", add= T)
install.packages(Hmisc)
library("Hmisc")
plot(d$x, d$y, type="n")
with (
data = d
, expr = errbar(x, y, y+sd, y-sd, add=T, pch=1, cap=.1)
)
)
quartz()
plot(timepoints, g1_mean, type="n")
with (
expr = errbar(timepoints, g1_mean, g1_mean+g1_sd, g1_mean-g1_sd, add=T, pch=1, cap=.1)
)
errbar
?errbar
installed.packages(Hmisc)
quartz()
qplot(timepoints, g1_mean)+geom_errorbar(aes(x=timepoints, ymin=g1_mean-g1_sd, ymax=g1_mean+g1_sd), width=0.25)
install.packages(ggplot2)
install.packages("ggplot2")
?qplot
qplot(timepoints, g1_mean)+geom_errorbar(aes(x=timepoints, ymin=g1_mean-g1_sd, ymax=g1_mean+g1_sd), width=0.25)
